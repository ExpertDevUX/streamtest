import { useState, useEffect } from 'react';
import { Stream } from '../types/stream';

export const useStreams = (userId: string | null) => {
  const [streams, setStreams] = useState<Stream[]>([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (userId) {
      loadStreams();
    }
  }, [userId]);

  const loadStreams = () => {
    const savedStreams = localStorage.getItem('streams');
    if (savedStreams) {
      const allStreams = JSON.parse(savedStreams);
      const parsedStreams = allStreams.map((stream: any) => ({
        ...stream,
        createdAt: new Date(stream.createdAt),
        expiresAt: new Date(stream.expiresAt)
      }));
      setStreams(parsedStreams.filter((s: Stream) => s.createdBy === userId));
    }
  };

  const createStream = (streamData: Omit<Stream, 'id' | 'createdAt' | 'expiresAt'>) => {
    const streamId = Date.now().toString();
    const newStream: Stream = {
      ...streamData,
      id: streamId,
      createdAt: new Date(),
      expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days
      // Use more realistic URLs that would be generated by your FFmpeg conversion
      hlsUrl: `https://your-cdn.com/hls/${streamId}/playlist.m3u8`,
      dashUrl: `https://your-cdn.com/dash/${streamId}/manifest.mpd`
    };

    const savedStreams = localStorage.getItem('streams');
    const allStreams = savedStreams ? JSON.parse(savedStreams) : [];
    allStreams.push(newStream);
    localStorage.setItem('streams', JSON.stringify(allStreams));
    
    setStreams(prev => [...prev, newStream]);
    return newStream;
  };

  const deleteStream = (streamId: string) => {
    const savedStreams = localStorage.getItem('streams');
    if (savedStreams) {
      const allStreams = JSON.parse(savedStreams);
      const updatedStreams = allStreams.filter((s: Stream) => s.id !== streamId);
      localStorage.setItem('streams', JSON.stringify(updatedStreams));
      setStreams(prev => prev.filter(s => s.id !== streamId));
    }
  };

  const updateStreamStatus = (streamId: string, status: Stream['status']) => {
    setStreams(prev => prev.map(stream => 
      stream.id === streamId ? { ...stream, status } : stream
    ));
  };

  return {
    streams,
    loading,
    createStream,
    deleteStream,
    updateStreamStatus
  };
};